---
- debug: msg="team access"

- include_vars: vars/acs-team-access-config.yaml

# Create Openshift Authenticator - created as part of CCM

# Get OpenShift Authenticator to retrieve the ID
- name: Get Auth Provider Id
  uri:
    url: "https://{{ api_endpoint }}/v1/authProviders?name={{ auth_provider.name }}"
    method: GET
    validate_certs: no
    headers:
      authorization: "{{ authorization }}"
    body_format: json
    status_code: 200
  register: authprovider_result

# Create the permission sets - created as part of CCM

# Create the access scopes
- name: Create Access Scopes
  uri:
    url: "https://{{ api_endpoint }}/v1/simpleaccessscopes"
    method: POST
    validate_certs: no
    headers:
      authorization: "{{ authorization }}"
    body_format: json
    body: "{{ item }}"
    status_code: [200, 409]
  with_items: "{{ access_scopes }}"

# Need to get the permission sets to get IDs for Roles
- name: Get Permission Sets
  uri:
    url: "https://{{ api_endpoint }}/v1/permissionsets"
    method: GET
    validate_certs: no
    headers:
      authorization: "{{ authorization }}"
    body_format: json
    status_code: 200
  register: permission_set_result

# Need to get the access scopes to get IDs for Roles
- name: Get Access Scopes
  uri:
    url: "https://{{ api_endpoint }}/v1/simpleaccessscopes"
    method: GET
    validate_certs: no
    headers:
      authorization: "{{ authorization }}"
    body_format: json
    status_code: 200
  register: access_scope_result

# Create all of the roles
- name: Create Roles
  include_tasks: create_role.yaml
  with_items: "{{ roles }}"

# Now we need to map
- name: Map role in Provider
  uri:
    url: "https://{{ api_endpoint }}/v1/groupsbatch"
    method: POST
    validate_certs: no
    headers:
        authorization: "{{ authorization }}"
    body_format: json
    body:
        previous_groups: []
        # - roleName: "{{ item.name }}"
        #   props:
        #     authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
        #     key: "{{ item.group_batch.key }}"
        #     value: "{{ item.group_batch.value }}"
        required_groups:
        - roleName: "{{ item.role_name }}"
          props:
            authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
            key: "{{ item.key }}"
            value: "{{ item.value }}"
    status_code: [200,500]
  with_items: "{{ role_mappings }}"
